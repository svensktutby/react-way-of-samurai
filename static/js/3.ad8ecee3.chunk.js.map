{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","state","status","props","editMode","activateEditMode","setState","deactivateEditMode","updateStatus","statusChangeHandler","e","currentTarget","value","prevProps","this","updateStatusIfNeeded","lastStatus","defaultStatus","className","s","editStatusWrapper","editStatus","onBlur","onChange","placeholder","autoFocus","statusWrapper","onClick","role","Component","ProfileInfo","profile","profileInfo","avatar","src","photos","large","userAvatar","alt","fullName","Preloader","text","Post","message","likesCount","post","width","height","like","type","heart","maxLength100","maxLengthCreator","AddPostFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","name","validate","required","styleBtn","btn","MyPosts","memo","posts","addPost","postsElements","reverse","map","p","id","postsBlock","formData","displayName","profileActions","MyPostsContainer","connect","profilePage","Profile","ProfileAPIContainer","refreshProfile","userId","Number","match","params","authorizedUserId","getProfile","getStatus","history","push","updateStatusCallback","ProfileContainer","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.ad8ecee3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2IJgv\",\"avatar\":\"ProfileInfo_avatar__3xuFq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusWrapper\":\"ProfileStatus_statusWrapper__2EA8v\",\"editStatusWrapper\":\"ProfileStatus_editStatusWrapper__2OqDz\",\"status\":\"ProfileStatus_status__3vAMm\",\"editStatus\":\"ProfileStatus_editStatus__36KXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"avatar\":\"Post_avatar__1wBwP\",\"message\":\"Post_message__3raFK\",\"text\":\"Post_text__3_Vii\",\"like\":\"Post_like__oViQh\",\"heart\":\"Post_heart__1jJO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddPostForm_form__33A21\"};","import React, { ChangeEvent, Component } from 'react';\n\nimport s from './ProfileStatus.module.css';\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\ntype StateType = {\n  status: string;\n  editMode: boolean;\n};\n\nexport class ProfileStatus extends Component<PropsType, StateType> {\n  state = {\n    status: this.props.status,\n    editMode: false,\n  };\n\n  componentDidUpdate(prevProps: Readonly<PropsType>): void {\n    this.updateStatusIfNeeded(prevProps.status);\n  }\n\n  activateEditMode = (): void => {\n    this.setState({\n      editMode: true,\n    });\n  };\n\n  deactivateEditMode = (): void => {\n    this.setState({\n      editMode: false,\n    });\n\n    this.props.updateStatus(this.state.status);\n  };\n\n  statusChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({\n      status: e.currentTarget.value,\n    });\n  };\n\n  updateStatusIfNeeded(lastStatus: string): void {\n    if (lastStatus !== this.props.status) {\n      this.setState({\n        status: this.props.status,\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    const defaultStatus = \"What's on your mind?\";\n\n    return (\n      <>\n        {!this.state.editMode ? (\n          <div className={s.statusWrapper}>\n            <span\n              className={s.status}\n              onClick={this.activateEditMode}\n              role=\"presentation\"\n            >\n              {this.props.status || defaultStatus}\n            </span>\n          </div>\n        ) : (\n          <div className={`${s.editStatusWrapper}`}>\n            <input\n              className={`${s.editStatus}`}\n              value={this.state.status}\n              onBlur={this.deactivateEditMode}\n              onChange={this.statusChangeHandler}\n              placeholder={defaultStatus}\n              autoFocus\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { FC } from 'react';\n\nimport s from './ProfileInfo.module.css';\nimport userAvatar from '../../../assets/images/userAvatar.svg';\nimport { ProfileType } from '../../../types/types';\nimport { Preloader } from '../../common/Preloader/Preloader';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\n\ntype ProfileInfoPropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\n  profile,\n  status,\n  updateStatus,\n}) => {\n  if (!profile) {\n    return <Preloader text=\"Loading...\" />;\n  }\n\n  return (\n    <div className={s.profileInfo}>\n      <img\n        className={s.avatar}\n        src={profile.photos.large || userAvatar}\n        alt={`${profile.fullName} avatar`}\n      />\n      <ProfileStatus status={status} updateStatus={updateStatus} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport s from './Post.module.css';\nimport userAvatar from '../../../../assets/images/userAvatar.svg';\nimport { PostType } from '../../../../types/types';\n\nexport const Post: FC<PostType> = ({ message, likesCount }) => {\n  return (\n    <div className={s.post}>\n      <img\n        className={s.avatar}\n        src={userAvatar}\n        width=\"50\"\n        height=\"50\"\n        alt=\"Avatar\"\n      />\n      <div>\n        <div className={s.message}>\n          <span className={s.text}>{message}</span>\n        </div>\n        <div className={s.like}>\n          <button type=\"button\" className={s.heart}>\n            &#9825;\n          </button>\n          <span>&nbsp;{likesCount}</span>\n          <span>&nbsp;{likesCount === 1 ? 'like' : 'likes'}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\n\nimport s from './AddPostForm.module.css';\nimport styleBtn from '../../../common/styles/Button.module.css';\nimport { maxLengthCreator, required } from '../../../../utils/validators';\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\n\nconst maxLength100 = maxLengthCreator(100);\n\nexport type AddPostFormDataType = {\n  post: string;\n};\n\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = ({\n  handleSubmit,\n}) => {\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"post\"\n        placeholder=\"Enter your message...\"\n        validate={[required, maxLength100]}\n      />\n\n      <button type=\"submit\" className={styleBtn.btn}>\n        Add post\n      </button>\n    </form>\n  );\n};\n\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({\n  form: 'profileAddPostForm',\n})(AddPostForm);\n","import React, { FC, memo } from 'react';\n\nimport s from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { PostType } from '../../../types/types';\nimport {\n  AddPostFormDataType,\n  AddPostFormRedux as AddPostForm,\n} from './AddPostForm/AddPostForm';\n\nexport type StatePropsType = {\n  posts: Array<PostType>;\n};\n\nexport type DispatchPropsType = {\n  addPost: (text: string) => void;\n};\n\nexport const MyPosts: FC<StatePropsType & DispatchPropsType> = memo(\n  ({ posts, addPost }) => {\n    const postsElements = [...posts]\n      .reverse()\n      .map((p) => (\n        <Post\n          key={p.id}\n          id={p.id}\n          message={p.message}\n          likesCount={p.likesCount}\n        />\n      ));\n\n    const addPostHandler = (formData: AddPostFormDataType) => {\n      addPost(formData.post);\n    };\n\n    return (\n      <div className={s.postsBlock}>\n        <h3>My posts</h3>\n\n        <AddPostForm onSubmit={addPostHandler} />\n\n        <div className={s.posts}>{postsElements}</div>\n      </div>\n    );\n  },\n);\n\nMyPosts.displayName = 'MyPosts';\n","import { connect } from 'react-redux';\n\nimport { actions as profileActions } from '../../../redux/profileReducer';\nimport { DispatchPropsType, MyPosts, StatePropsType } from './MyPosts';\nimport { AppStateType } from '../../../redux/reduxStore';\n\nconst { addPost } = profileActions;\n\nconst mapStateToProps = ({\n  profilePage: { posts },\n}: AppStateType): StatePropsType => {\n  return {\n    posts,\n  };\n};\n\nexport const MyPostsContainer = connect<\n  StatePropsType,\n  DispatchPropsType,\n  Record<string, never>,\n  AppStateType\n>(mapStateToProps, { addPost })(MyPosts);\n","import React, { FC } from 'react';\n\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\nimport { ProfileType } from '../../types/types';\n\ntype ProfilePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nexport const Profile: FC<ProfilePropsType> = ({\n  profile,\n  status,\n  updateStatus,\n}) => {\n  return (\n    <div>\n      <ProfileInfo\n        profile={profile}\n        status={status}\n        updateStatus={updateStatus}\n      />\n\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React, { Component, ComponentType } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Profile } from './Profile';\nimport { ProfileType } from '../../types/types';\nimport { AppStateType } from '../../redux/reduxStore';\nimport {\n  getProfile,\n  getStatus,\n  updateStatus,\n} from '../../redux/profileReducer';\n\ntype PathPropsType = {\n  userId: string;\n};\n\ntype RouterPropsType = RouteComponentProps<PathPropsType>;\n\ntype StatePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  authorizedUserId: number | null;\n};\n\ntype DispatchPropsType = {\n  getProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  updateStatus: (status: string) => void;\n};\n\ntype PropsType = StatePropsType & DispatchPropsType & RouterPropsType;\n\nclass ProfileAPIContainer extends Component<PropsType> {\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  refreshProfile() {\n    const userId =\n      Number(this.props.match.params.userId) || this.props.authorizedUserId;\n\n    if (!userId) {\n      this.props.history.push('/login');\n    } else {\n      this.props.getProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  render(): JSX.Element {\n    const {\n      profile,\n      status,\n      updateStatus: updateStatusCallback,\n      ...props\n    } = this.props;\n\n    return (\n      <Profile\n        {...props}\n        profile={profile}\n        status={status}\n        updateStatus={updateStatusCallback}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  profilePage: { profile, status },\n  auth: { id },\n}: AppStateType) => {\n  return {\n    profile,\n    status,\n    authorizedUserId: id,\n  };\n};\n\nexport const ProfileContainer = compose<ComponentType>(\n  connect(mapStateToProps, { getProfile, getStatus, updateStatus }),\n  withRouter,\n)(ProfileAPIContainer);\n"],"sourceRoot":""}