{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileData/ProfileContacts/ProfileContacts.module.css","components/common/styles/link.module.css","components/Profile/ProfileInfo/ProfileData/ProfileDataForm/ProfileDataForm.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileContacts/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","state","status","props","editMode","activateEditMode","setState","deactivateEditMode","updateStatus","statusChangeHandler","e","currentTarget","value","prevProps","this","updateStatusIfNeeded","lastStatus","defaultStatus","className","s","editStatusWrapper","editStatus","onBlur","onChange","placeholder","autoFocus","statusWrapper","onClick","role","Component","ProfileContacts","contacts","list","Object","entries","map","title","link","Field","component","Input","name","styleLink","href","target","rel","randomId","ProfileData","isOwner","profile","turnOnEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","styleBtn","btn","type","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","onSubmit","errorWrapper","checkboxFieldWrapper","checkboxField","textareaField","Textarea","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","text","photos","profileInfo","photoWrapper","photo","src","large","userPhoto","alt","label","inputFile","files","icon","viewBox","width","version","height","xmlns","d","initialValues","formData","then","Post","message","likesCount","post","avatar","userAvatar","like","heart","maxLength100","maxLengthCreator","AddPostReduxForm","validate","required","MyPosts","memo","posts","addPost","postsElements","reverse","p","id","postsBlock","displayName","profileActions","MyPostsContainer","connect","profilePage","Profile","ProfileAPIContainer","refreshProfile","match","params","userId","Number","authorizedUserId","getProfile","getStatus","history","push","updateStatusCallback","savePhotoCallback","saveProfileCallback","ProfileContainer","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.b1091b4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2IJgv\",\"photoWrapper\":\"ProfileInfo_photoWrapper__2Sf8d\",\"label\":\"ProfileInfo_label__v3rdV\",\"icon\":\"ProfileInfo_icon__31_Fp\",\"inputFile\":\"ProfileInfo_inputFile__1x-DX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusWrapper\":\"ProfileStatus_statusWrapper__2EA8v\",\"editStatusWrapper\":\"ProfileStatus_editStatusWrapper__2OqDz\",\"status\":\"ProfileStatus_status__3vAMm\",\"editStatus\":\"ProfileStatus_editStatus__36KXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ProfileContacts_list__39Jki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"link_link__2naQk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkboxField\":\"ProfileDataForm_checkboxField__lqqrf\",\"textareaField\":\"ProfileDataForm_textareaField__10oqa\",\"errorWrapper\":\"ProfileDataForm_errorWrapper__3ARJi errorMessageForm_errorWrapper__LmXZN\",\"error\":\"ProfileDataForm_error__3SRn2 errorMessageForm_error__1dDl6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"avatar\":\"Post_avatar__1wBwP\",\"message\":\"Post_message__3raFK\",\"text\":\"Post_text__3_Vii\",\"like\":\"Post_like__oViQh\",\"heart\":\"Post_heart__1jJO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddPostForm_form__33A21\"};","import React, { ChangeEvent, Component } from 'react';\n\nimport s from './ProfileStatus.module.css';\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\ntype StateType = {\n  status: string;\n  editMode: boolean;\n};\n\nexport class ProfileStatus extends Component<PropsType, StateType> {\n  state = {\n    status: this.props.status,\n    editMode: false,\n  };\n\n  componentDidUpdate(prevProps: Readonly<PropsType>): void {\n    this.updateStatusIfNeeded(prevProps.status);\n  }\n\n  activateEditMode = (): void => {\n    this.setState({\n      editMode: true,\n    });\n  };\n\n  deactivateEditMode = (): void => {\n    this.setState({\n      editMode: false,\n    });\n\n    this.props.updateStatus(this.state.status);\n  };\n\n  statusChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({\n      status: e.currentTarget.value,\n    });\n  };\n\n  updateStatusIfNeeded(lastStatus: string): void {\n    if (lastStatus !== this.props.status) {\n      this.setState({\n        status: this.props.status,\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    const defaultStatus = \"What's on your mind?\";\n\n    return (\n      <>\n        {!this.state.editMode ? (\n          <div className={s.statusWrapper}>\n            <span\n              className={s.status}\n              onClick={this.activateEditMode}\n              role=\"presentation\"\n            >\n              {this.props.status || defaultStatus}\n            </span>\n          </div>\n        ) : (\n          <div className={`${s.editStatusWrapper}`}>\n            <input\n              className={`${s.editStatus}`}\n              value={this.state.status}\n              onBlur={this.deactivateEditMode}\n              onChange={this.statusChangeHandler}\n              placeholder={defaultStatus}\n              autoFocus\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport { Field } from 'redux-form';\n\nimport s from './ProfileContacts.module.css';\nimport styleLink from '../../../../common/styles/link.module.css';\nimport { randomId } from '../../../../../utils/randomId';\nimport { ContactsType } from '../../../../../types/types';\nimport { Input } from '../../../../common/FormsControls/FormsControls';\n\ntype ProfileContactPropsType = {\n  contacts: ContactsType;\n  editMode?: boolean;\n};\n\nexport const ProfileContacts: FC<ProfileContactPropsType> = ({\n  contacts,\n  editMode,\n}) => {\n  return (\n    <ul className={s.list}>\n      {Object.entries(contacts).map(([title, link]) => (\n        <li key={randomId()}>\n          {editMode ? (\n            <Field\n              component={Input}\n              name={`contacts.${title}`}\n              placeholder={`Link to ${title}`}\n            />\n          ) : (\n            link && (\n              <a\n                className={styleLink.link}\n                href={link}\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                {title}\n              </a>\n            )\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\n\nimport styleBtn from '../../../common/styles/button.module.css';\nimport { ProfileType } from '../../../../types/types';\nimport { ProfileContacts } from './ProfileContacts/ProfileContacts';\n\ntype ProfileDataPropsType = {\n  isOwner: boolean;\n  profile: ProfileType;\n  turnOnEditMode: () => void;\n};\n\nexport const ProfileData: FC<ProfileDataPropsType> = ({\n  isOwner,\n  profile,\n  turnOnEditMode,\n}) => {\n  const {\n    fullName,\n    aboutMe,\n    contacts,\n    lookingForAJob,\n    lookingForAJobDescription,\n  } = profile;\n\n  return (\n    <div>\n      {isOwner && (\n        <div>\n          <button\n            className={styleBtn.btn}\n            type=\"button\"\n            onClick={turnOnEditMode}\n          >\n            Edit\n          </button>\n        </div>\n      )}\n\n      <div>{fullName}</div>\n\n      <div>\n        {lookingForAJob ? 'Available for work' : 'Not available for work'}\n      </div>\n\n      {lookingForAJob && (\n        <div>\n          <span>My skills: </span>\n          {lookingForAJobDescription}\n        </div>\n      )}\n\n      <div>\n        <span>About me: </span>\n        {aboutMe}\n      </div>\n\n      <div>\n        <span>Contacts: </span>\n        <ProfileContacts contacts={contacts} />\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\n\nimport s from './ProfileDataForm.module.css';\nimport styleBtn from '../../../../common/styles/button.module.css';\nimport { ProfileType } from '../../../../../types/types';\nimport { ProfileContacts } from '../ProfileContacts/ProfileContacts';\nimport {\n  Input,\n  Textarea,\n} from '../../../../common/FormsControls/FormsControls';\n\ntype PropsType = {\n  profile: ProfileType;\n  editMode: boolean;\n};\n\nexport const ProfileDataForm: FC<\n  InjectedFormProps<ProfileType, PropsType> & PropsType\n> = ({ handleSubmit, error, profile: { contacts }, editMode }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <div className={`${s.errorWrapper}`}>\n          {error && <span className={`${s.error}`}>{error}</span>}\n        </div>\n\n        <button className={styleBtn.btn} type=\"submit\">\n          Save\n        </button>\n      </div>\n\n      <div>\n        <Field component={Input} name=\"fullName\" placeholder=\"Full name\" />\n      </div>\n\n      <div>\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label className={s.checkboxFieldWrapper}>\n          <Field\n            className={s.checkboxField}\n            component={Input}\n            name=\"lookingForAJob\"\n            type=\"checkbox\"\n          />\n          <span>Available for work</span>\n        </label>\n      </div>\n\n      <div>\n        <Field\n          className={s.textareaField}\n          component={Textarea}\n          name=\"lookingForAJobDescription\"\n          placeholder=\"My skills\"\n        />\n      </div>\n\n      <div>\n        <Field\n          className={s.textareaField}\n          component={Textarea}\n          name=\"aboutMe\"\n          placeholder=\"About me\"\n        />\n      </div>\n\n      <div>\n        <span>Contacts: </span>\n        <ProfileContacts contacts={contacts} editMode={editMode} />\n      </div>\n    </form>\n  );\n};\n\nexport const ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({\n  form: 'edit-profile',\n})(ProfileDataForm);\n","import React, { ChangeEvent, FC, useState } from 'react';\n\nimport s from './ProfileInfo.module.css';\nimport userPhoto from '../../../assets/images/userAvatar.svg';\nimport { ProfileType } from '../../../types/types';\nimport { Preloader } from '../../common/Preloader/Preloader';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\nimport { ProfileData } from './ProfileData/ProfileData';\nimport { ProfileDataReduxForm as ProfileDataForm } from './ProfileData/ProfileDataForm/ProfileDataForm';\n\ntype ProfileInfoPropsType = {\n  isOwner: boolean;\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<unknown>;\n};\n\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\n  isOwner,\n  profile,\n  status,\n  updateStatus,\n  savePhoto,\n  saveProfile,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader text=\"Loading...\" />;\n  }\n\n  const { photos, fullName } = profile;\n\n  const addUserPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const submitHandler = (formData: ProfileType) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div className={s.profileInfo}>\n      <div className={s.photoWrapper}>\n        <img\n          className={s.photo}\n          src={photos.large || userPhoto}\n          alt={`${fullName}`}\n        />\n\n        {isOwner && (\n          <label className={s.label} title=\"Add photo\">\n            <input\n              className={s.inputFile}\n              type=\"file\"\n              onChange={addUserPhotoHandler}\n            />\n            <svg\n              className={s.icon}\n              viewBox=\"0 0 32 32\"\n              width=\"32\"\n              version=\"1.1\"\n              height=\"32\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M9.5 19c0 3.59 2.91 6.5 6.5 6.5s6.5-2.91 6.5-6.5-2.91-6.5-6.5-6.5-6.5 2.91-6.5 6.5zM30 8h-7c-0.5-2-1-4-3-4h-8c-2 0-2.5 2-3 4h-7c-1.1 0-2 0.9-2 2v18c0 1.1 0.9 2 2 2h28c1.1 0 2-0.9 2-2v-18c0-1.1-0.9-2-2-2zM16 27.875c-4.902 0-8.875-3.973-8.875-8.875s3.973-8.875 8.875-8.875c4.902 0 8.875 3.973 8.875 8.875s-3.973 8.875-8.875 8.875zM30 14h-4v-2h4v2z\" />\n            </svg>\n          </label>\n        )}\n      </div>\n\n      {editMode ? (\n        <ProfileDataForm\n          profile={profile}\n          editMode={editMode}\n          initialValues={profile}\n          onSubmit={submitHandler}\n        />\n      ) : (\n        <ProfileData\n          profile={profile}\n          isOwner={isOwner}\n          turnOnEditMode={() => {\n            setEditMode(true);\n          }}\n        />\n      )}\n\n      <ProfileStatus status={status} updateStatus={updateStatus} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport s from './Post.module.css';\nimport userAvatar from '../../../../assets/images/userAvatar.svg';\nimport { PostType } from '../../../../types/types';\n\nexport const Post: FC<PostType> = ({ message, likesCount }) => {\n  return (\n    <div className={s.post}>\n      <img\n        className={s.avatar}\n        src={userAvatar}\n        width=\"50\"\n        height=\"50\"\n        alt=\"Avatar\"\n      />\n      <div>\n        <div className={s.message}>\n          <span className={s.text}>{message}</span>\n        </div>\n        <div className={s.like}>\n          <button type=\"button\" className={s.heart}>\n            &#9825;\n          </button>\n          <span>&nbsp;{likesCount}</span>\n          <span>&nbsp;{likesCount === 1 ? 'like' : 'likes'}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\n\nimport s from './AddPostForm.module.css';\nimport styleBtn from '../../../common/styles/button.module.css';\nimport { maxLengthCreator, required } from '../../../../utils/validators';\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\n\nconst maxLength100 = maxLengthCreator(100);\n\nexport type AddPostFormDataType = {\n  post: string;\n};\n\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = ({\n  handleSubmit,\n}) => {\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"post\"\n        placeholder=\"Enter your message...\"\n        validate={[required, maxLength100]}\n      />\n\n      <button type=\"submit\" className={styleBtn.btn}>\n        Add post\n      </button>\n    </form>\n  );\n};\n\nexport const AddPostReduxForm = reduxForm<AddPostFormDataType>({\n  form: 'profileAddPostForm',\n})(AddPostForm);\n","import React, { FC, memo } from 'react';\n\nimport s from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { PostType } from '../../../types/types';\nimport {\n  AddPostFormDataType,\n  AddPostReduxForm as AddPostForm,\n} from './AddPostForm/AddPostForm';\n\nexport type StatePropsType = {\n  posts: Array<PostType>;\n};\n\nexport type DispatchPropsType = {\n  addPost: (text: string) => void;\n};\n\nexport const MyPosts: FC<StatePropsType & DispatchPropsType> = memo(\n  ({ posts, addPost }) => {\n    const postsElements = [...posts]\n      .reverse()\n      .map((p) => (\n        <Post\n          key={p.id}\n          id={p.id}\n          message={p.message}\n          likesCount={p.likesCount}\n        />\n      ));\n\n    const addPostHandler = (formData: AddPostFormDataType) => {\n      addPost(formData.post);\n    };\n\n    return (\n      <div className={s.postsBlock}>\n        <h3>My posts</h3>\n\n        <AddPostForm onSubmit={addPostHandler} />\n\n        <div className={s.posts}>{postsElements}</div>\n      </div>\n    );\n  },\n);\n\nMyPosts.displayName = 'MyPosts';\n","import { connect } from 'react-redux';\n\nimport { actions as profileActions } from '../../../redux/profileReducer';\nimport { DispatchPropsType, MyPosts, StatePropsType } from './MyPosts';\nimport { AppStateType } from '../../../redux/reduxStore';\n\nconst { addPost } = profileActions;\n\nconst mapStateToProps = ({\n  profilePage: { posts },\n}: AppStateType): StatePropsType => {\n  return {\n    posts,\n  };\n};\n\nexport const MyPostsContainer = connect<\n  StatePropsType,\n  DispatchPropsType,\n  Record<string, never>,\n  AppStateType\n>(mapStateToProps, { addPost })(MyPosts);\n","import React, { FC } from 'react';\n\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\nimport { ProfileType } from '../../types/types';\n\ntype ProfilePropsType = {\n  isOwner: boolean;\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<unknown>;\n};\n\nexport const Profile: FC<ProfilePropsType> = ({\n  isOwner,\n  profile,\n  status,\n  updateStatus,\n  savePhoto,\n  saveProfile,\n}) => {\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n        profile={profile}\n        status={status}\n        updateStatus={updateStatus}\n        savePhoto={savePhoto}\n        saveProfile={saveProfile}\n      />\n\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React, { Component, ComponentType } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Profile } from './Profile';\nimport { ProfileType } from '../../types/types';\nimport { AppStateType } from '../../redux/reduxStore';\nimport {\n  getProfile,\n  getStatus,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from '../../redux/profileReducer';\n\ntype PathPropsType = {\n  userId: string;\n};\n\ntype RouterPropsType = RouteComponentProps<PathPropsType>;\n\ntype StatePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  authorizedUserId: number | null;\n};\n\ntype DispatchPropsType = {\n  getProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<unknown>;\n};\n\ntype PropsType = StatePropsType & DispatchPropsType & RouterPropsType;\n\nclass ProfileAPIContainer extends Component<PropsType> {\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  refreshProfile() {\n    const userId =\n      Number(this.props.match.params.userId) || this.props.authorizedUserId;\n\n    if (!userId) {\n      this.props.history.push('/login');\n    } else {\n      this.props.getProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  render(): JSX.Element {\n    const {\n      profile,\n      status,\n      updateStatus: updateStatusCallback,\n      savePhoto: savePhotoCallback,\n      saveProfile: saveProfileCallback,\n      ...props\n    } = this.props;\n\n    return (\n      <Profile\n        {...props}\n        isOwner={!this.props.match.params.userId}\n        profile={profile}\n        status={status}\n        updateStatus={updateStatusCallback}\n        savePhoto={savePhotoCallback}\n        saveProfile={saveProfileCallback}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  profilePage: { profile, status },\n  auth: { id },\n}: AppStateType) => {\n  return {\n    profile,\n    status,\n    authorizedUserId: id,\n  };\n};\n\nexport const ProfileContainer = compose<ComponentType>(\n  connect(mapStateToProps, {\n    getProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter,\n)(ProfileAPIContainer);\n"],"sourceRoot":""}