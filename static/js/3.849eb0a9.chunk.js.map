{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","state","status","props","editMode","activateEditMode","setState","deactivateEditMode","updateStatus","statusChangeHandler","e","currentTarget","value","prevProps","this","updateStatusIfNeeded","lastStatus","defaultStatus","className","s","editStatusWrapper","editStatus","onBlur","onChange","placeholder","autoFocus","statusWrapper","onClick","role","Component","ProfileInfo","isOwner","profile","savePhoto","Preloader","text","profileInfo","photoWrapper","photo","src","photos","large","userPhoto","alt","fullName","label","title","inputFile","type","target","files","icon","viewBox","width","version","height","xmlns","d","Post","message","likesCount","post","avatar","userAvatar","like","heart","maxLength100","maxLengthCreator","AddPostFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","name","validate","required","styleBtn","btn","MyPosts","memo","posts","addPost","postsElements","reverse","map","p","id","postsBlock","formData","displayName","profileActions","MyPostsContainer","connect","profilePage","Profile","ProfileAPIContainer","refreshProfile","match","params","userId","Number","authorizedUserId","getProfile","getStatus","history","push","updateStatusCallback","savePhotoCallback","ProfileContainer","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.849eb0a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2IJgv\",\"photoWrapper\":\"ProfileInfo_photoWrapper__2Sf8d\",\"label\":\"ProfileInfo_label__v3rdV\",\"icon\":\"ProfileInfo_icon__31_Fp\",\"inputFile\":\"ProfileInfo_inputFile__1x-DX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusWrapper\":\"ProfileStatus_statusWrapper__2EA8v\",\"editStatusWrapper\":\"ProfileStatus_editStatusWrapper__2OqDz\",\"status\":\"ProfileStatus_status__3vAMm\",\"editStatus\":\"ProfileStatus_editStatus__36KXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"avatar\":\"Post_avatar__1wBwP\",\"message\":\"Post_message__3raFK\",\"text\":\"Post_text__3_Vii\",\"like\":\"Post_like__oViQh\",\"heart\":\"Post_heart__1jJO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddPostForm_form__33A21\"};","import React, { ChangeEvent, Component } from 'react';\n\nimport s from './ProfileStatus.module.css';\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\ntype StateType = {\n  status: string;\n  editMode: boolean;\n};\n\nexport class ProfileStatus extends Component<PropsType, StateType> {\n  state = {\n    status: this.props.status,\n    editMode: false,\n  };\n\n  componentDidUpdate(prevProps: Readonly<PropsType>): void {\n    this.updateStatusIfNeeded(prevProps.status);\n  }\n\n  activateEditMode = (): void => {\n    this.setState({\n      editMode: true,\n    });\n  };\n\n  deactivateEditMode = (): void => {\n    this.setState({\n      editMode: false,\n    });\n\n    this.props.updateStatus(this.state.status);\n  };\n\n  statusChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({\n      status: e.currentTarget.value,\n    });\n  };\n\n  updateStatusIfNeeded(lastStatus: string): void {\n    if (lastStatus !== this.props.status) {\n      this.setState({\n        status: this.props.status,\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    const defaultStatus = \"What's on your mind?\";\n\n    return (\n      <>\n        {!this.state.editMode ? (\n          <div className={s.statusWrapper}>\n            <span\n              className={s.status}\n              onClick={this.activateEditMode}\n              role=\"presentation\"\n            >\n              {this.props.status || defaultStatus}\n            </span>\n          </div>\n        ) : (\n          <div className={`${s.editStatusWrapper}`}>\n            <input\n              className={`${s.editStatus}`}\n              value={this.state.status}\n              onBlur={this.deactivateEditMode}\n              onChange={this.statusChangeHandler}\n              placeholder={defaultStatus}\n              autoFocus\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { ChangeEvent, FC } from 'react';\n\nimport s from './ProfileInfo.module.css';\nimport userPhoto from '../../../assets/images/userAvatar.svg';\nimport { ProfileType } from '../../../types/types';\nimport { Preloader } from '../../common/Preloader/Preloader';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\n\ntype ProfileInfoPropsType = {\n  isOwner: boolean;\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n};\n\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\n  isOwner,\n  profile,\n  status,\n  updateStatus,\n  savePhoto,\n}) => {\n  if (!profile) {\n    return <Preloader text=\"Loading...\" />;\n  }\n\n  const addUserPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div className={s.profileInfo}>\n      <div className={s.photoWrapper}>\n        <img\n          className={s.photo}\n          src={profile.photos.large || userPhoto}\n          alt={`${profile.fullName}`}\n        />\n\n        {isOwner && (\n          <label className={s.label} title=\"Add photo\">\n            <input\n              className={s.inputFile}\n              type=\"file\"\n              onChange={addUserPhotoHandler}\n            />\n            <svg\n              className={s.icon}\n              viewBox=\"0 0 32 32\"\n              width=\"32\"\n              version=\"1.1\"\n              height=\"32\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M9.5 19c0 3.59 2.91 6.5 6.5 6.5s6.5-2.91 6.5-6.5-2.91-6.5-6.5-6.5-6.5 2.91-6.5 6.5zM30 8h-7c-0.5-2-1-4-3-4h-8c-2 0-2.5 2-3 4h-7c-1.1 0-2 0.9-2 2v18c0 1.1 0.9 2 2 2h28c1.1 0 2-0.9 2-2v-18c0-1.1-0.9-2-2-2zM16 27.875c-4.902 0-8.875-3.973-8.875-8.875s3.973-8.875 8.875-8.875c4.902 0 8.875 3.973 8.875 8.875s-3.973 8.875-8.875 8.875zM30 14h-4v-2h4v2z\" />\n            </svg>\n          </label>\n        )}\n      </div>\n\n      <ProfileStatus status={status} updateStatus={updateStatus} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport s from './Post.module.css';\nimport userAvatar from '../../../../assets/images/userAvatar.svg';\nimport { PostType } from '../../../../types/types';\n\nexport const Post: FC<PostType> = ({ message, likesCount }) => {\n  return (\n    <div className={s.post}>\n      <img\n        className={s.avatar}\n        src={userAvatar}\n        width=\"50\"\n        height=\"50\"\n        alt=\"Avatar\"\n      />\n      <div>\n        <div className={s.message}>\n          <span className={s.text}>{message}</span>\n        </div>\n        <div className={s.like}>\n          <button type=\"button\" className={s.heart}>\n            &#9825;\n          </button>\n          <span>&nbsp;{likesCount}</span>\n          <span>&nbsp;{likesCount === 1 ? 'like' : 'likes'}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\n\nimport s from './AddPostForm.module.css';\nimport styleBtn from '../../../common/styles/button.module.css';\nimport { maxLengthCreator, required } from '../../../../utils/validators';\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\n\nconst maxLength100 = maxLengthCreator(100);\n\nexport type AddPostFormDataType = {\n  post: string;\n};\n\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = ({\n  handleSubmit,\n}) => {\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"post\"\n        placeholder=\"Enter your message...\"\n        validate={[required, maxLength100]}\n      />\n\n      <button type=\"submit\" className={styleBtn.btn}>\n        Add post\n      </button>\n    </form>\n  );\n};\n\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({\n  form: 'profileAddPostForm',\n})(AddPostForm);\n","import React, { FC, memo } from 'react';\n\nimport s from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { PostType } from '../../../types/types';\nimport {\n  AddPostFormDataType,\n  AddPostFormRedux as AddPostForm,\n} from './AddPostForm/AddPostForm';\n\nexport type StatePropsType = {\n  posts: Array<PostType>;\n};\n\nexport type DispatchPropsType = {\n  addPost: (text: string) => void;\n};\n\nexport const MyPosts: FC<StatePropsType & DispatchPropsType> = memo(\n  ({ posts, addPost }) => {\n    const postsElements = [...posts]\n      .reverse()\n      .map((p) => (\n        <Post\n          key={p.id}\n          id={p.id}\n          message={p.message}\n          likesCount={p.likesCount}\n        />\n      ));\n\n    const addPostHandler = (formData: AddPostFormDataType) => {\n      addPost(formData.post);\n    };\n\n    return (\n      <div className={s.postsBlock}>\n        <h3>My posts</h3>\n\n        <AddPostForm onSubmit={addPostHandler} />\n\n        <div className={s.posts}>{postsElements}</div>\n      </div>\n    );\n  },\n);\n\nMyPosts.displayName = 'MyPosts';\n","import { connect } from 'react-redux';\n\nimport { actions as profileActions } from '../../../redux/profileReducer';\nimport { DispatchPropsType, MyPosts, StatePropsType } from './MyPosts';\nimport { AppStateType } from '../../../redux/reduxStore';\n\nconst { addPost } = profileActions;\n\nconst mapStateToProps = ({\n  profilePage: { posts },\n}: AppStateType): StatePropsType => {\n  return {\n    posts,\n  };\n};\n\nexport const MyPostsContainer = connect<\n  StatePropsType,\n  DispatchPropsType,\n  Record<string, never>,\n  AppStateType\n>(mapStateToProps, { addPost })(MyPosts);\n","import React, { FC } from 'react';\n\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\nimport { ProfileType } from '../../types/types';\n\ntype ProfilePropsType = {\n  isOwner: boolean;\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n};\n\nexport const Profile: FC<ProfilePropsType> = ({\n  isOwner,\n  profile,\n  status,\n  updateStatus,\n  savePhoto,\n}) => {\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n        profile={profile}\n        status={status}\n        updateStatus={updateStatus}\n        savePhoto={savePhoto}\n      />\n\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React, { Component, ComponentType } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Profile } from './Profile';\nimport { ProfileType } from '../../types/types';\nimport { AppStateType } from '../../redux/reduxStore';\nimport {\n  getProfile,\n  getStatus,\n  savePhoto,\n  updateStatus,\n} from '../../redux/profileReducer';\n\ntype PathPropsType = {\n  userId: string;\n};\n\ntype RouterPropsType = RouteComponentProps<PathPropsType>;\n\ntype StatePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  authorizedUserId: number | null;\n};\n\ntype DispatchPropsType = {\n  getProfile: (userId: number) => void;\n  getStatus: (userId: number) => void;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n};\n\ntype PropsType = StatePropsType & DispatchPropsType & RouterPropsType;\n\nclass ProfileAPIContainer extends Component<PropsType> {\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  refreshProfile() {\n    const userId =\n      Number(this.props.match.params.userId) || this.props.authorizedUserId;\n\n    if (!userId) {\n      this.props.history.push('/login');\n    } else {\n      this.props.getProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  render(): JSX.Element {\n    const {\n      profile,\n      status,\n      updateStatus: updateStatusCallback,\n      savePhoto: savePhotoCallback,\n      ...props\n    } = this.props;\n\n    return (\n      <Profile\n        {...props}\n        isOwner={!this.props.match.params.userId}\n        profile={profile}\n        status={status}\n        updateStatus={updateStatusCallback}\n        savePhoto={savePhotoCallback}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  profilePage: { profile, status },\n  auth: { id },\n}: AppStateType) => {\n  return {\n    profile,\n    status,\n    authorizedUserId: id,\n  };\n};\n\nexport const ProfileContainer = compose<ComponentType>(\n  connect(mapStateToProps, { getProfile, getStatus, updateStatus, savePhoto }),\n  withRouter,\n)(ProfileAPIContainer);\n"],"sourceRoot":""}